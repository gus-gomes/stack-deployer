---
apiVersion: v1
kind: Namespace
metadata:
  name: logging
  labels:
    name: logging
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: logging
  namespace: logging 
spec:
  chart: https://%{KUBERNETES_API}%/static/charts/logging-operator-{{ logging_version }}.tgz 
  version: "{{ logging_version }}"
  targetNamespace: logging
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: elastic
  namespace: logging
spec:
  chart: https://%{KUBERNETES_API}%/static/charts/elasticsearch-{{ elastic_version }}.tgz 
  targetNamespace: logging
  version: "{{ elastic_version }}"
  valuesContent: |-
    replicas: 1
    minimumMasterNodes: 1
    secret:
      password: "elastic"
    service:
      type: NodePort
      nodePort: 30301
    createCert: false
    esConfig:
      elasticsearch.yml: |
        discovery:
          type: single-node
        xpack.security.enabled: true
        xpack.security.transport.ssl.enabled: true
        xpack.security.transport.ssl.verification_mode: full
        xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs-gen/keystore.p12
        xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs-gen/keystore.p12
        xpack.security.authc:
          anonymous:
            username: anonymous 
            roles: superuser
            authz_exception: true 
    # share generated cert
    extraVolumes:
      - name: tls-certificates
        emptyDir: {}
    # for the generated cert
    extraVolumeMounts:
      - name: tls-certificates
        mountPath: /usr/share/elasticsearch/config/certs-gen
        readOnly: true
    # define container to build the cert
    extraInitContainers:
      - name: setup-tls-cert
        image: "docker.elastic.co/elasticsearch/elasticsearch:{{ elastic_version }}"
        command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash
          set -euo pipefail
          elasticsearch-certutil cert \
            --name ${NODE_NAME} \
            --days 1000 \
            --ip ${POD_IP} \
            --dns ${NODE_NAME},${POD_SERVICE_NAME},${POD_SERVICE_NAME_HEADLESS},${NODE_NAME}.${POD_SERVICE_NAME},${NODE_NAME}.${POD_SERVICE_NAME_HEADLESS} \
            --ca-cert /usr/share/elasticsearch/config/certs/tls.crt \
            --ca-key /usr/share/elasticsearch/config/certs/tls.key  \
            --ca-pass "" \
            --pass "" \
            --out /usr/share/elasticsearch/config/certs-gen/keystore.p12
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_SERVICE_NAME
          value: "elasticsearch-master"
        - name: POD_SERVICE_NAME_HEADLESS
          value: "elasticsearch-master-headless"
        volumeMounts:
        - name: elastic-certificates
          mountPath: /usr/share/elasticsearch/config/certs
        - name: tls-certificates
          mountPath: /usr/share/elasticsearch/config/certs-gen
    # mount the CA from secret
    secretMounts:
      - name: elastic-certificates
        secretName: ca-key-pair
        path: /usr/share/elasticsearch/config/certs
    ## TODO 
    ## remove setting env [cluster.initial_master_nodes] 
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: kibana
  namespace: logging
spec:
  chart: https://%{KUBERNETES_API}%/static/charts/kibana-{{ kibana_version }}.tgz 
  targetNamespace: logging
  version: "{{ kibana_version }}"
  valuesContent: |-
    service:
      type: NodePort
    elasticsearchHosts: "https://elastic:elastic@192.168.1.231:30301"